# Source: https://www.digitalocean.com/community/tutorials/how-to-deploy-a-meteor-js-application-on-ubuntu-14-04-with-nginx

server_tokens off; # for security-by-obscurity: stop displaying nginx version

# HTTP
server {
    listen 80 default_server; # if this is not a default server, remove "default_server"
    listen [::]:80 default_server ipv6only=on;

    root /usr/share/nginx/html;
    index index.html index.htm;

    # server_name www.${URL_DOMAIN}; # the domain on which we want to host the application. Since we set "default_server" previously, nginx will answer all hosts anyway.
}

# HTTPS server
server {
    listen 443 default_server ssl http2; # we enable SPDY here
    listen [::]:443 default_server ssl http2 ipv6only=on;
    server_name www.${URL_DOMAIN}; # this domain must match Common Name (CN) in the SSL certificate

    root /usr/share/nginx/html; # root is irrelevant
    index index.html index.htm; # this is also irrelevant

    ssl_certificate_key /run/secrets/pki.millegrilles.web.key; # full path to SSL key

    # Sans OCSP
    # ssl_certificate /run/secrets/pki.millegrilles.web.fullchain; # full path to SSL certificate
    # Avec OCSP - (pas encore trouve comment faire fonctionner avec LetsEncrypt)
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_certificate /run/secrets/pki.millegrilles.web.cert; # full path to SSL certificate
    ssl_trusted_certificate /run/secrets/pki.millegrilles.web.chain; # full path to CA certificate concatenated together

    # performance enhancement for SSL
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 5m;

    # safety enhancement to SSL: make sure we actually use a safe cipher
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK';

    # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    add_header Strict-Transport-Security "max-age=31536000;";

    # If your application is not compatible with IE <= 10, this will redirect visitors to a page advising a browser update
    # This works because IE 11 does not present itself as MSIE anymore
    if ($http_user_agent ~ "MSIE" ) {
        return 303 https://browser-update.org/update.html;
    }

}
